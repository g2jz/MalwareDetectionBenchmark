# Supress Sklearn models version mismatch warning
import warnings
warnings.filterwarnings(action='ignore', category=UserWarning)

# Imports
import pickle
import numpy as np


# Bytes to various multiples
def bytesTo(bytes, to, bsize=1024): 
    
    # Mutiples acronyms
    a = {'k' : 1, 'm': 2, 'g' : 3, 't' : 4, 'p' : 5, 'e' : 6 }
    
    # Cast to float
    r = float(bytes)

    # Convert
    conversion = bytes / (bsize ** a[to]) 
    
    # Return conversion
    return conversion


# Load pickle from file
def loadPickle(filename):
    
    # Check if file exists
    if os.path.exists(filename):
        
        # Load pickle
        with open(filename, 'rb') as f:
            results = pickle.load(f)
        
    return results


# Print values from dict
def printResults(results):
    
    # Iterate over model acronyms (Necessary because of the structure of the pickle)
    for i, name in enumerate(results['model_acronyms']):
        # Print start of model
        print('\n' + '*' * 35)
        
        # Print Model Name
        print('Model: ' + results['model_names'][i])
        
        # Print Model Bacc
        print('Bacc: %.3f ± %.3f' % (np.mean(results['nested_score'][name]['bacc']), np.std(results['nested_score'][name]['bacc'])))
        
        # Print Recall 
        print('Recall: %.3f ± %.3f' % (np.mean(results['nested_score'][name]['recall']), np.std(results['nested_score'][name]['recall'])))
        
        # Print Precision
        print('Precision: %.3f ± %.3f' % (np.mean(results['nested_score'][name]['precision']), np.std(results['nested_score'][name]['precision'])))
        
        # Print F1
        print('F1: %.3f ± %.3f' % (np.mean(results['nested_score'][name]['f1']), np.std(results['nested_score'][name]['f1'])))
        
        # Print MCC
        print('MCC: %.3f ± %.3f' % (np.mean(results['nested_score'][name]['mcc']), np.std(results['nested_score'][name]['mcc'])))
        
        # Print Kappa
        print('Kappa: %.3f ± %.3f' % (np.mean(results['nested_score'][name]['kappa']), np.std(results['nested_score'][name]['kappa'])))
        
        # Print Fit Time
        print('Fit Time(s): %.3f ± %.3f' % (np.mean(results['nested_score'][name]['fit_time']), np.std(results['nested_score'][name]['fit_time'])))
        
        # Print Predict Time
        print('Predict Time (s): %.3f ± %.3f' % (np.mean(results['nested_score'][name]['predict_time']), np.std(results['nested_score'][name]['predict_time'])))
        
        # Print memory size in mb
        print('Memory Size (MB): %.3f ± %.3f' % (bytesTo(np.mean(results['nested_score'][name]['memory']), 'm'), bytesTo(np.std(results['nested_score'][name]['memory']), 'm')))
        
        # Print end of model
        print('*' * 35 + '\n')
           

# Main
if __name__ == "__main__":

    # Results pickle filename
    filename = '../NestedCV/Results/Results_FINAL.pkl'
    
    # Load results
    results = loadPickle(filename)
    
    # Print results
    printResults(results)