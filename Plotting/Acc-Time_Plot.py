# Supress Sklearn models version mismatch warning
import warnings
warnings.filterwarnings(action='ignore', category=UserWarning)


# Imports
import os
import signal
import pickle
from scipy import interpolate
import numpy as np
# Plotting
import matplotlib.pyplot as plt
from adjustText import adjust_text


# Ctrl + C
def handler(sig, frame):
    print("\nSaliendo...\n")
    exit(1)
    
signal.signal(signal.SIGINT, handler)


# Loads results pickle
def loadPickle(filename):
    
    # Check if filename exists
    if os.path.exists(filename):
        
        # Load Pickle
        with open(filename, 'rb') as file:
            results = pickle.load(file)
        
        # Return unpickled results
        return results
    
    # If file does not exist raise exception
    else:
        raise Exception('Results pickle not found')


# Extract needed data from dict
def extractData(results):
    
    # Extract needed results to lists
    model_acronyms = results['model_acronyms']
    acc = list()
    times = list()
    for model in model_acronyms:
        acc.append(np.array(results['nested_score'][model]['bacc']).mean())
        times.append(np.array(results['nested_score'][model]['fit_time']).mean())
        
    return model_acronyms, times, acc


# Plot models accuracy vs time
def plotTimeAcc(model_acronyms, times, acc):
        
    # Define plot labels
    plt.title("Balanced Accuracy vs Fit Time")
    plt.xlabel("Fit Time (s)")
    plt.ylabel("Balanced Accuracy")
    
    # Define scatter plot
    plt.scatter(times, acc)
    
    # Define axis for annotations without overlapping
    texts = []
    for x, y, s in zip(times, acc, model_acronyms):
        texts.append(plt.text(x, y, s, size=9))
    
    f = interpolate.interp1d(times, acc)
    x = np.linspace(min(times), max(times), 500)
    y = f(x)  
    
    # Annotate models without overlapping
    adjust_text(texts, x=x, y=y, arrowprops=dict(arrowstyle="-", color='r', lw=0.5))
    
    # Show plot
    #plt.show()
    
    # Save figure to pdf
    plt.savefig("acc-vs-time.pdf")
    
    
# Main
if __name__ == "__main__":
    
    # Results pickle filename
    filename = '../NestedCV/Results/Results_FINAL.pkl'
    
    # Load result data
    results = loadPickle(filename)
    
    # Extract data from pickle
    model_acronyms, times, acc = extractData(results)
    
    # Plot acc and time results
    plotTimeAcc(model_acronyms, times, acc)
