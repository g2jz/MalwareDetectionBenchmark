import numpy as np
import os
import signal
import pickle
# Plotting
import matplotlib.pyplot as plt
import mplcursors

# Ctrl + C
def handler(sig, frame):
    print("\nSaliendo...\n")
    exit(1)
    
signal.signal(signal.SIGINT, handler)

def loadData(filename):
    # Unpickle results
    if os.path.exists(filename):
        with open(filename, 'rb') as file:
            results = pickle.load(file)
        return results
    else:
        raise Exception('Results pickle not found')

def plotAccTime(results):
    # Extract needed results
    model_acronyms = results['model_acronyms']
    #times = results['times']
    #acc = results['acc']
    acc = list()
    times = list()
    for model in model_acronyms:
        acc.append(np.array(results['nested_score'][model]['bacc']).mean())
        times.append(np.array(results['nested_score'][model]['fit_time']).mean())
        
    # Define plot labels
    plt.title("Balanced Accuracy vs fit time")
    plt.xlabel("Fit time (s)")
    plt.ylabel("Balanced Accuracy")
    
    # Define plot
    plt.scatter(times, acc)

    # Interactive labels for scatter points
    mplcursors.cursor(multiple=True).connect(
        "add", lambda sel: sel.annotation.set_text(
        model_acronyms[sel.target.index]      
    ))
    
    # Show plot
    plt.show()
    
    # Annotate scatter points
    #for i, label in enumerate(model_acronyms):
    #    plt.annotate(label, (times[i], acc[i]))
    #
    # Save figure to pdf
    #plt.savefig("acc-vs-time.pdf")
    
if __name__ == "__main__":
    # Results pickle filename
    filename = './Results/Results.pkl'
    
    # Load result data
    results = loadData(filename)
    
    # Plot acc and time results
    plotAccTime(results)
