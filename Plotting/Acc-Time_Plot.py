# Supress Sklearn models version mismatch warning
import warnings
warnings.filterwarnings(action='ignore', category=UserWarning)


# Imports
import os
import signal
import pickle
from scipy import interpolate
import numpy as np
# Plotting
import matplotlib.pyplot as plt
from adjustText import adjust_text


# Ctrl + C
def handler(sig, frame):
    print("\nSaliendo...\n")
    exit(1)
    
signal.signal(signal.SIGINT, handler)


# Loads results pickle
def loadPickle(filename):
    
    # Check if filename exists
    if os.path.exists(filename):
        
        # Load Pickle
        with open(filename, 'rb') as file:
            results = pickle.load(file)
        
        # Return unpickled results
        return results
    
    # If file does not exist raise exception
    else:
        raise Exception('Results pickle not found')


# Extract needed data from dict
def extractData(results):
    
    # Create lists to save results
    model_acronyms = results['model_acronyms']
    acc = list()
    fit_times = list()
    predict_times = list()
    
    # Extract needed results to lists
    for model in model_acronyms:
        acc.append(np.array(results['nested_score'][model]['bacc']).mean())
        fit_times.append(np.array(results['nested_score'][model]['fit_time']).mean())
        predict_times.append(np.array(results['nested_score'][model]['predict_time']).mean())
        
    # Calculate total times
    total_times = [x + y for (x,y) in zip(fit_times, predict_times)]
        
        
    return model_acronyms, fit_times, predict_times, total_times, acc

    
# Plot models accuracy vs time
def plotTimeAcc(model_acronyms, times, acc, title, xlabel, pdfFilename):
        
    # Define plot labels
    plt.title(title)
    plt.xlabel(xlabel)
    plt.ylabel("Balanced Accuracy")
    
    # Set x axis to logarithmic
    plt.xscale("log") 

    # Define scatter plot
    plt.scatter(times, acc)
    
    # Define axis for annotations without overlapping
    texts = []
    for x, y, s in zip(times, acc, model_acronyms):
        texts.append(plt.text(x, y, s, size=9))
    
    f = interpolate.interp1d(times, acc)
    x = np.linspace(min(times), max(times), 500)
    y = f(x)  
    
    # Annotate models without overlapping
    adjust_text(texts, x=x, y=y, arrowprops=dict(arrowstyle="-", color='r', lw=0.5))
    
    # Save figure to pdf
    plt.savefig(pdfFilename)
    
    # Clear plot
    plt.clf()
   

# Plot three plots with different times
def allPlots(model_acronyms, fit_times, predict_times, total_times, acc):
    
    # Plot acc and fit time results
    plotTimeAcc(model_acronyms, fit_times, acc, 'Balanced Accuracy vs Fit Time', 'Fit Time (s)', 'acc-vs-fit.pdf')
    
    # Plot acc and predict time results
    plotTimeAcc(model_acronyms, predict_times, acc, 'Balanced Accuracy vs Predict Time', 'Predict Time (s)', 'acc-vs-predict.pdf')
    
    # Plot acc and total time results
    plotTimeAcc(model_acronyms, total_times, acc, 'Balanced Accuracy vs Total Time', 'Total Time (s)', 'acc-vs-total.pdf')
    
    
# Main
if __name__ == "__main__":
    
    # Results pickle filename
    filename = '../NestedCV/Results/Results_FINAL.pkl'
    
    # Load result data
    results = loadPickle(filename)
    
    # Extract data from pickle
    model_acronyms, fit_times, predict_times, total_times, acc = extractData(results)
    
    # Save all plots to pdf
    allPlots(model_acronyms, fit_times, predict_times, total_times, acc)
    

